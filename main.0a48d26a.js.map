{"version":3,"sources":["scripts/main.js"],"names":["gameBoard","document","querySelector","gameScore","gameButton","gameMessages","querySelectorAll","rowsCount","cellsCount","cellsArray","totalScore","resetArray","i","length","j","renderGameBoard","innerHTML","map","row","cell","join","textContent","insertRandomPlate","zeroCells","push","randomIndx","Math","floor","random","randomPlateValue","slide","slidingRow","filter","value","rowWithoutZero","zeroForRow","Array","fill","resultSlidingRow","slideLeft","boardArray","rowToSlide","slideRigth","reverse","slideUp","slideDown","canSlide","direction","copyBoardArray","JSON","parse","stringify","testArray","flat","every","element","index","showMessage","state","forEach","msg","classList","toggle","contains","checkGame","window","removeEventListener","arrowPress","some","pressEvent","key","array","rows","cells","r","rowArr","c","addEventListener","e","button","target","replace"],"mappings":"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","file":"main.0a48d26a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameBoard = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst gameButton = document.querySelector('.button');\nconst gameMessages = document.querySelectorAll('.message');\n\nconst rowsCount = 4;\nconst cellsCount = rowsCount;\nconst cellsArray = [];\nlet totalScore = 0;\n\n(function(array, rows, cells) {\n  for (let r = 0; r < rows; r++) {\n    const rowArr = [];\n\n    array.push(rowArr);\n\n    for (let c = 0; c < cells; c++) {\n      const cellArr = 0;\n\n      rowArr.push(cellArr);\n    }\n  }\n  renderGameBoard();\n})(cellsArray, rowsCount, cellsCount);\n\nfunction resetArray() {\n  for (let i = 0; i < cellsArray.length; i++) {\n    for (let j = 0; j < cellsArray[i].length; j++) {\n      cellsArray[i][j] = 0;\n    }\n  }\n  totalScore = 0;\n}\n\nfunction renderGameBoard() {\n  gameBoard.innerHTML = `\n    <tbody>${cellsArray.map(row => `\n      <tr class=\"field-row\">${row.map(cell => `\n        <td class=\"field-cell field-cell--${cell}\">\n          ${cell > 0 ? cell : ''}\n        </td>\n      `).join('')}\n      </tr>\n    `).join('')}\n    </tbody>\n  `;\n  gameScore.textContent = totalScore;\n};\n\nfunction insertRandomPlate() {\n  const zeroCells = [];\n\n  for (let row = 0; row < cellsArray.length; row++) {\n    for (let cell = 0; cell < cellsArray[row].length; cell++) {\n      if (cellsArray[row][cell] === 0) {\n        zeroCells.push([row, cell]);\n      }\n    }\n  }\n\n  if (zeroCells.length > 0) {\n    const randomIndx = zeroCells[Math.floor(Math.random() * zeroCells.length)];\n    const randomPlateValue = Math.random() > 0.1 ? 2 : 4;\n    const [row, cell] = randomIndx;\n\n    cellsArray[row][cell] = randomPlateValue;\n  }\n};\n\nfunction slide(row) {\n  const slidingRow = row.filter(value => value !== 0);\n\n  for (let i = 0; i < slidingRow.length - 1; i++) {\n    if (slidingRow[i] === slidingRow[i + 1]) {\n      slidingRow[i] *= 2;\n      slidingRow[i + 1] = 0;\n      totalScore += slidingRow[i];\n    }\n  }\n\n  const rowWithoutZero = slidingRow.filter(value => value !== 0);\n  const zeroForRow = Array(cellsCount - rowWithoutZero.length).fill(0);\n  const resultSlidingRow = [...rowWithoutZero, ...zeroForRow];\n\n  return resultSlidingRow;\n};\n\nfunction slideLeft(boardArray) {\n  for (let row = 0; row < boardArray.length; row++) {\n    let rowToSlide = boardArray[row];\n\n    rowToSlide = slide(rowToSlide);\n    boardArray[row] = rowToSlide;\n  }\n};\n\nfunction slideRigth(boardArray) {\n  for (let row = 0; row < boardArray.length; row++) {\n    let rowToSlide = boardArray[row];\n\n    rowToSlide.reverse();\n    rowToSlide = slide(rowToSlide);\n    rowToSlide.reverse();\n    boardArray[row] = rowToSlide;\n  }\n};\n\nfunction slideUp(boardArray) {\n  for (let cell = 0; cell < cellsCount; cell++) {\n    let rowToSlide = [\n      boardArray[0][cell],\n      boardArray[1][cell],\n      boardArray[2][cell],\n      boardArray[3][cell],\n    ];\n\n    rowToSlide = slide(rowToSlide);\n\n    for (let row = 0; row < rowsCount; row++) {\n      boardArray[row][cell] = rowToSlide[row];\n    }\n  }\n};\n\nfunction slideDown(boardArray) {\n  for (let cell = 0; cell < cellsCount; cell++) {\n    let rowToSlide = [\n      boardArray[0][cell],\n      boardArray[1][cell],\n      boardArray[2][cell],\n      boardArray[3][cell],\n    ];\n\n    rowToSlide.reverse();\n    rowToSlide = slide(rowToSlide);\n    rowToSlide.reverse();\n\n    for (let row = 0; row < rowsCount; row++) {\n      boardArray[row][cell] = rowToSlide[row];\n    }\n  }\n};\n\nfunction canSlide(boardArray, direction) {\n  const copyBoardArray = JSON.parse(JSON.stringify(boardArray));\n  const testArray = JSON.parse(JSON.stringify(copyBoardArray));\n\n  switch (direction) {\n    case 'left':\n      slideLeft(testArray);\n      break;\n\n    case 'right':\n      slideRigth(testArray);\n      break;\n\n    case 'up':\n      slideUp(testArray);\n      break;\n\n    case 'down':\n      slideDown(testArray);\n      break;\n  };\n\n  return !(testArray.flat()\n    .every((element, index) => element === copyBoardArray.flat()[index]));\n};\n\nfunction showMessage(state) {\n  gameMessages.forEach(msg => {\n    msg.classList.toggle('hidden', !msg.classList.contains(`message-${state}`));\n  });\n};\n\nfunction checkGame() {\n  if (!canSlide(cellsArray, 'left') && !canSlide(cellsArray, 'right')\n    && !canSlide(cellsArray, 'up' && !canSlide(cellsArray, 'down'))) {\n    showMessage('lose');\n    window.removeEventListener('keyup', arrowPress);\n  }\n\n  if (cellsArray.flat().some(value => value === 2048)) {\n    showMessage('win');\n  }\n};\n\ngameButton.addEventListener('click', e => {\n  const button = e.target;\n\n  switch (true) {\n    case (button.classList.contains('start')):\n      insertRandomPlate();\n      insertRandomPlate();\n      renderGameBoard();\n      showMessage('running');\n      button.classList.replace('start', 'restart');\n      button.textContent = 'Restart';\n      window.addEventListener('keyup', arrowPress);\n      break;\n\n    case (button.classList.contains('restart')):\n      resetArray();\n      insertRandomPlate();\n      insertRandomPlate();\n      renderGameBoard();\n      showMessage('running');\n      window.addEventListener('keyup', arrowPress);\n      break;\n\n    default:\n      window.addEventListener('keyup', arrowPress);\n  }\n});\n\nfunction arrowPress(pressEvent) {\n  switch (pressEvent.key) {\n    case 'ArrowLeft':\n      checkGame();\n\n      if (!canSlide(cellsArray, 'left')) {\n        return;\n      }\n      slideLeft(cellsArray);\n      insertRandomPlate();\n      renderGameBoard();\n      break;\n\n    case 'ArrowRight':\n      checkGame();\n\n      if (!canSlide(cellsArray, 'right')) {\n        return;\n      }\n      slideRigth(cellsArray);\n      insertRandomPlate();\n      renderGameBoard();\n      break;\n\n    case 'ArrowUp':\n      checkGame();\n\n      if (!canSlide(cellsArray, 'up')) {\n        return;\n      }\n      slideUp(cellsArray);\n      insertRandomPlate();\n      renderGameBoard();\n      break;\n\n    case 'ArrowDown':\n      checkGame();\n\n      if (!canSlide(cellsArray, 'down')) {\n        return;\n      }\n      slideDown(cellsArray);\n      insertRandomPlate();\n      renderGameBoard();\n      break;\n  }\n};\n"]}